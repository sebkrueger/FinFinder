import streamlit as st
import openai
import os
from dotenv import load_dotenv
from pathlib import Path
from openai import OpenAI

# Load OpenAI API key on Streamlit Cloud
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    # Check current directory and up to two parent directories for .env
    for path in [Path.cwd(), Path.cwd().parent, Path.cwd().parent.parent]:
        dotenv_file = path / ".env"
        if dotenv_file.exists():
            load_dotenv(dotenv_file)
            break

client = OpenAI()

# Basic prompt for context
developer_prompt = f"""
# Identit√§t

Du bis ein Chatbot, der auf Basis von gegeben Informationen eines Nutzer, bestimmen sollst um welchen Fisch aus deutschen
Gew√§ssern (Meere, Seen oder Fl√ºsse) es sich handelt. Du sollst zu Erkennung nachfragen stellen, um zwischen noch verbleibenden
Kandidaten unterscheiden zu k√∂nnen.

# Anweisungen

1. Nur Fische in der Liste weiter unten sind als Antwort erlaubt.
2. Ausgabesprache ist deutsch
3. Wenn du nicht ganz genau einen Fisch bestimmen konntest, weisen verbleibende Fischkandidaten immer noch identische Merkmale, stelle R√ºckfragen an den Nutzer! 
4. Gib als Ergebnis nur den Namen des Fisches aus

# Liste von Fischen

---------------------------
Name: Brassen
Gr√∂√üe: 40cm - 60cm
Gewicht: bis max. 6 kg

Vorkommen: 
    Seen und Teichen: Sie sind in flachen Uferzonen und tiefen Bereichen anzutreffen. 
    Langsam flie√üenden Fl√ºssen: Sie leben in Flussunterl√§ufen, Altarme und Bereiche mit ruhiger Str√∂mung. 
    Baggerseen und Talsperren: Sie finden hier einen idealen Lebensraum, insbesondere wenn diese √ºber einen starken Pflanzenbestand verf√ºgen. 
    Brackwasser: In den M√ºndungsgebieten von Fl√ºssen sind sie ebenfalls zu finden.

Verwechselbar mit: G√ºster, Zobel, Zope
Merkmale: hochr√ºckiger, seitlich stark abgeflachter K√∂rper, Lange Afterflosse, Maul vorst√ºlpbar, graue F√§rbung, Schwanzflosse stark eingek√§rbt

----------------------------
Name: Rotauge
Gr√∂√üe: 20cm - 45cm

Vorkommen: 

    Seen: Sie sind h√§ufig in Seen, auch in h√∂heren Lagen (bis zu 1000 m), zu finden. 
    Fl√ºsse: Sie besiedeln auch Fl√ºsse, bevorzugt mittelgro√üe Fl√ºsse mit nicht zu starker Str√∂mung. 
    Teiche: Auch in Teichen sind sie h√§ufig zu finden. 
    Brackwasser: Sie kommen auch im Brackwasser der Nord- und Ostsee vor. 
    Weitere Gew√§sser: Rotaugen sind auch in Sumpfgebieten und Altarme zu finden. 


Gewicht: bis max. 2 kg
Verwechselbar mit: Rotfeder, Aland, G√ºster
Merkmale: hochr√ºckiger, seitlich stark abgeflachter K√∂rper, rote Augeniris, r√∂tliche Flossen, Vorderkante von R√ºcken und Bauchflossen auf einer H√∂he

----------------------------
Name: Dreistachliger Stichling
Gr√∂√üe: 4 cm - 10 cm

Vorkommen: 

    S√º√üwasser: Der Dreistachlige Stichling findet sich in vielen Binnengew√§ssern, wie Seen, Fl√ºssen und T√ºmpeln. Er bevorzugt pflanzenreiche Flachwasserzonen. 
    Brackwasser: In K√ºstenregionen, insbesondere in der Ostsee, ist der Stichling sehr h√§ufig in Brackwassergebieten zu finden, wo S√º√üwasser und Salzwasser miteinander vermischen. 
    Flie√ügew√§sser: Der Dreistachlige Stichling kann auch in langsam flie√üenden Gew√§ssern leben, zum Beispiel in Altwasserarmen und Flussunterl√§ufen. 
    Salzwasser: Es gibt auch marine Formen des Dreistachligen Stichlings, die in Nord- und Ostsee leben und zur Laichzeit flussaufw√§rts in Brackwasser ziehen. 

Gewicht: 10-20 Gramm
Verwechselbar mit: Zwergstichling
Merkmale: kleiner, sehr schlanker, seitlich abgeflachter K√∂rper, langer d√ºnner Schwanzstiel, drei Stacheln vor der R√ºckengflosse, rote Laichf√§rbung

"""

def get_openai_response(messages):
    try:
        completion = client.chat.completions.create(
            model="gpt-4.1-mini", messages=messages, temperature=0
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {e}"


# Streamlit UI
st.title("Fin Finder - Chatbot üêü üê†")
st.write("Welche Merkmale hat dein Fisch? Gr√∂√üe, Farbe, Lebensraum")

# Set a default model
if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-4.1-mini"

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "developer", "content": developer_prompt}]

# Display chat messages from history on app rerun
for message in st.session_state.messages[1:]:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("Beschreibe deinen Fisch (Gr√∂√üe, Farbe, Lebensraum, Schwanzflosse, ...)"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        stream = client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
            ],
            stream=True,
        )
        response = st.write_stream(stream)
    st.session_state.messages.append({"role": "assistant", "content": response})